--1.Un procedimiento el cual se encarga de registrar un empleado, en este procedi-
--miento debe introducir la información del empleado y se debe encargar de inser-
--tar en las tablas correspondientes, es importante que no permitan la inserción de
--numero o símbolos cuando sean campos relacionados a nombres y apellidos.

CREATE OR REPLACE FUNCTION INSERTAR_EMPLEADO(_ID INTEGER,_NOM_VIV character varying, _NOMBRES character varying, _A_P character varying,
											 _A_M character varying, _SALARIO MONEY, _DIR character varying, _FECHA_NAC DATE, _ROL character varying,
											 _TELEFONO INTEGER, _CORREO CHARACTER VARYING, _FECHA_INGRESO DATE)
  RETURNS void AS
  $$
      BEGIN
	  	IF (IS_CADENA(_NOM_VIV) AND IS_CADENA(_NOMBRES) AND IS_CADENA(_A_P) AND IS_CADENA(_A_M)) THEN

        	INSERT INTO EMPLEADO(ID_EMPLEADO,NOMBRE_VIVERO,NOMBRES,APELLIDO_PATERNO,APELLIDO_MATERNO,SALARIO,DIRECCION,FECHA_NACIMIENTO,FECHA_INGRESO,ROL)
			VALUES(_ID,_NOM_VIV,_NOMBRES,_A_P,_A_M,_SALARIO,_DIR,_FECHA_NAC,_FECHA_INGRESO,_ROL);
			INSERT INTO TELEFONO_EMPLEADO(ID_EMPLEADO,TELEFONOS) VALUES(_ID,_TELEFONO);
			INSERT INTO CORREO_EMPLEADO(ID_EMPLEADO,CORREOS) VALUES(_ID,_CORREO);
		ELSE
			RAISE EXCEPTION 'ERROR: Alguno de los nombres es invalido';
		END IF;
      END;
  $$
  LANGUAGE 'plpgsql';

--2. Un procedimiento el cual se encargue de eliminar un empleado, en este pro-
--cedimiento debes introducir SÓLO el id del empleado y cuando elimines este
--empleado debes eliminar todas sus referencias de sus tablas hijas, a excepción
--de las tablas de ventas, ahí deberás cambiar el id del empleado por otro valor
--(NULL / DEFAULT).

CREATE OR REPLACE FUNCTION ELIMINAR_EMPLEADO(INTEGER)
  RETURNS void AS
  $$
      BEGIN
        DELETE FROM EMPLEADO WHERE ID_EMPLEADO = $1;
		DELETE FROM TELEFONO_EMPLEADO WHERE ID_EMPLEADO = $1;
		DELETE FROM CORREO_EMPLEADO WHERE ID_EMPLEADO = $1;
		UPDATE PLANTA SET ID_EMPLEADO = NULL WHERE ID_EMPLEADO = $1;
		UPDATE VENTA_FISICA SET ID_EMPLEADO_COBRAR = NULL WHERE ID_EMPLEADO_COBRAR = $1;
		UPDATE VENTA_FISICA SET ID_EMPLEADO_AYUDAR = NULL WHERE ID_EMPLEADO_AYUDAR = $1;
      END;
  $$
  LANGUAGE 'plpgsql';


--3. Un procedimiento el cual se encargue de registrar las ventas físicas realizadas
--por un cliente.
CREATE OR REPLACE FUNCTION INSERTAR_VENTA_FISICA(_ID INTEGER,_ID_E_COBRAR INTEGER,_NOM_VIV character varying, _ID_CLIENTE INTEGER,
												 _ID_E_AYUDAR INTEGER, _N_PRODS INTEGER, FORMA_PAGO CHARACTER VARYING,_NOMBRE_PLANTA CHARACTER VARYING,_PAGO MONEY)
  RETURNS void AS
  $$
  	  DECLARE
	  	_P_A_P_D MONEY;
		_FECHA_ACTUAL DATE;
      BEGIN
	  	SELECT PRECIO*_N_PRODS INTO _P_A_P_D FROM PLANTA WHERE NOMBRE_PLANTA = _NOMBRE_PLANTA;
		SELECT CURRENT_DATE INTO _FECHA_ACTUAL;
        INSERT INTO VENTA_FISICA VALUES(_ID,_ID_E_COBRAR,_NOM_VIV,_ID_CLIENTE,_ID_E_AYUDAR,_N_PRODS,_P_A_P_D,(_P_A_P_D*0.16)+_P_A_P_D,_FECHA_ACTUAL);
		INSERT INTO FORMA_PAGO_FISICA VALUES(_ID,FORMA_PAGO);
		INSERT INTO REGISTRAR VALUES(_ID,_NOMBRE_PLANTA);
		INSERT INTO DESGLOSE_VENTA VALUES(_ID,FORMA_PAGO,_PAGO);
      END;
  $$
  LANGUAGE 'plpgsql';

--4. Un procedimiento el cual se encargue de registrar las ventas online realizadas
--por un cliente.

CREATE OR REPLACE FUNCTION INSERTAR_VENTA_ONLINE(_N_SEG INTEGER,_FECHA DATE, _ID_CLIENTE INTEGER, _N_PRODS INTEGER,
												 FORMA_PAGO CHARACTER VARYING, _NOMBRE_PLANTA CHARACTER VARYING, _DIR CHARACTER VARYING, _ID_EMPLEADO_COBRAR INT)
  RETURNS void AS
  $$
  	  DECLARE
	  	_P_A_P_D MONEY;
      BEGIN
	  	SELECT PRECIO*_N_PRODS INTO _P_A_P_D FROM PLANTA WHERE NOMBRE_PLANTA = _NOMBRE_PLANTA;
        INSERT INTO VENTA_ONLINE VALUES(_N_SEG,_FECHA,_ID_CLIENTE,_ID_EMPLEADO_COBRAR,_N_PRODS,_P_A_P_D,(_P_A_P_D*0.16)+_P_A_P_D);
		INSERT INTO FORMA_PAGO_ONLINE VALUES(_N_SEG,FORMA_PAGO);
		INSERT INTO INSCRIBIR VALUES(_N_SEG,_NOMBRE_PLANTA);
		INSERT INTO DIRECCION_ONLINE VALUES(_ID_CLIENTE,_DIR);
      END;
  $$
  LANGUAGE 'plpgsql';

--5. Procedimiento que se encarga de registrar a los clientes.
CREATE OR REPLACE FUNCTION INSERTAR_CLIENTE(_ID_CLIENTE INTEGER, _NOMBRES CHARACTER VARYING, _A_P CHARACTER VARYING, _A_M CHARACTER VARYING,
										_DIR character varying, _FECHA DATE, _TELEFONO INTEGER, _CORREO CHARACTER VARYING)
	RETURNS void AS
	$$
      BEGIN
	  	IF (IS_CADENA(_NOMBRES) AND IS_CADENA(_A_P) AND IS_CADENA(_A_M)) THEN
        	INSERT INTO CLIENTE(ID_CLIENTE,NOMBRES,APELLIDO_PATERNO,APELLIDO_MATERNO,DIRECCION,FECHA_NACIMIENTO)
			VALUES(_ID_CLIENTE,_NOMBRES,_A_P,_A_M,_DIR,_FECHA);
			INSERT INTO TELEFONO_CLIENTE(ID_CLIENTE,TELEFONOS) VALUES(_ID_CLIENTE,_TELEFONO);
			INSERT INTO CORREO_CLIENTE(ID_CLIENTE,CORREOS) VALUES(_ID_CLIENTE,_CORREO);
		ELSE
			RAISE EXCEPTION 'ERROR: Alguno de los nombres es invalido';
		END IF;
      END;
  	$$
  LANGUAGE 'plpgsql';

--6. Procedimiento que se encarga de registrar a los viveros
CREATE OR REPLACE FUNCTION INSERTAR_VIVERO(_NOMBRE CHARACTER VARYING, _TIPO CHARACTER VARYING, _AREA CHARACTER VARYING, _FECHA DATE,
										_DIR CHARACTER VARYING, _TELEFONO INTEGER)
	RETURNS void AS
	$$
      BEGIN
	  	IF (IS_CADENA(_NOMBRE) AND IS_CADENA(_TIPO) AND IS_CADENA(_AREA)) THEN
        	INSERT INTO VIVERO(NOMBRE_VIVERO,TIPO,FECHA_APERTURA,DIRECCION)
			VALUES(_NOMBRE,_TIPO,_FECHA,_DIR);
			INSERT INTO TELEFONO_VIVERO VALUES(_NOMBRE,_TELEFONO);
			--INSERT INTO AREA_VIVERO VALUES(_TIPO,_AREA);
		ELSE
			RAISE EXCEPTION 'ERROR: Alguno de los nombres es invalido';
		END IF;
      END;
  	$$
  LANGUAGE 'plpgsql';
	
--7. Procedimiento creado para insertar una planta a la bases de datos
CREATE OR REPLACE FUNCTION INSERTAR_PLANTA(_NOMBRE CHARACTER VARYING, ID_EMPLEADO INT, _GENERO CHARACTER VARYING, _SUSTRATO CHARACTER VARYING, _TIPO CHARACTER VARYING,
										   _RIEGO character varying, _FECHA DATE, _PRECIO MONEY)
	RETURNS void AS
	$$
      BEGIN
	  	IF (IS_CADENA(_NOMBRE) AND IS_CADENA(_TIPO) AND IS_CADENA(_SUSTRATO) AND IS_CADENA(_GENERO)) THEN
        	INSERT INTO PLANTA VALUES(_NOMBRE,ID_EMPLEADO,_GENERO,_SUSTRATO,_TIPO,_RIEGO,_FECHA,_PRECIO);
		ELSE
			RAISE EXCEPTION 'ERROR: Alguno de los nombres es invalido';
		END IF;
      END;
  	$$
  LANGUAGE 'plpgsql';

--8. Procedimiento para insertar un ejemplar productor
CREATE OR REPLACE FUNCTION INSERTAR_PRODUCTOR(_NOMBRE_PROD CHARACTER VARYING, _NOMBRE_PLANTA CHARACTER VARYING, _U_FUM DATE, _U_FERT DATE, _U_RIEGO DATE , _FECHA DATE)
RETURNS VOID AS $$
	BEGIN
	  	IF (IS_CADENA(_NOMBRE_PLANTA)) THEN
        	INSERT INTO PRODUCTOR VALUES(_NOMBRE_PROD,_NOMBRE_PLANTA,_U_FUM, _U_FERT, _U_RIEGO,_FECHA);
		ELSE
			RAISE EXCEPTION 'ERROR: Alguno de los nombres es invalido';
		END IF;
      END;
  	$$
  LANGUAGE 'plpgsql';

--9. Procedimiento para insertar las parejas productoras
CREATE OR REPLACE FUNCTION INSERTAR_PAREJA_PRODUCTOR(_NOMBRE_PROD_REP CHARACTER VARYING, _NOMBRE_PROD CHARACTER VARYING, _NOMBRE_PLANTA CHARACTER VARYING)
RETURNS VOID AS $$
	BEGIN
	  	IF (IS_CADENA(_NOMBRE_PLANTA)) THEN
        	INSERT INTO PAREJA_PRODUCTOR VALUES(_NOMBRE_PROD,_NOMBRE_PLANTA,_NOMBRE_PROD_REP);
		ELSE
			RAISE EXCEPTION 'ERROR: Alguno de los nombres es invalido';
		END IF;
      END;
  	$$
  LANGUAGE 'plpgsql';

--10. Procedimiento para insertar una semilla
CREATE OR REPLACE FUNCTION INSERTAR_SEMILLA(_ID_SEMILLA INT, _CANTIDAD_OBT INT, _FECHA_POL DATE, _NOMBRE_PROD CHARACTER VARYING)
RETURNS VOID AS $$
	  BEGIN
		INSERT INTO SEMILLA VALUES(_ID_SEMILLA, _CANTIDAD_OBT, _FECHA_POL, _NOMBRE_PROD);
      END;
  	$$
  LANGUAGE 'plpgsql';

--11. Procedimiento para insertar una semilla ya germinada
CREATE OR REPLACE FUNCTION INSERTAR_SEMILLA_GERM(_ID_SEMILLA INT,_U_FUM DATE, _U_FERT DATE, _U_RIEGO DATE , _FECHA DATE, _CANTIDAD_OBT INT)
RETURNS VOID AS $$
	DECLARE
		_ORIGEN CHARACTER VARYING;
	BEGIN
	SELECT NOMBRE_PRODUCTOR INTO _ORIGEN FROM SEMILLA WHERE ID_SEMILLA = _ID_SEMILLA;
	INSERT INTO SEMILLA_GERM VALUES(_ID_SEMILLA,_ORIGEN,_U_FUM,_U_FERT,_U_RIEGO,_FECHA,_CANTIDAD_OBT);
	END;
  	$$
  LANGUAGE 'plpgsql';
